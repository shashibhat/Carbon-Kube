1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "carbon-kube.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "carbon-kube.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "carbon-kube.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "carbon-kube.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Carbon-Kube has been deployed successfully!

   Components installed:
   {{- if .Values.scheduler.enabled }}
   ✓ Scheduler Plugin: Enabled
   {{- end }}
   {{- if .Values.poller.enabled }}
   ✓ API Poller: Enabled (Schedule: {{ .Values.poller.schedule }})
   {{- end }}
   {{- if .Values.rlTuner.enabled }}
   ✓ RL Tuner: Enabled (Schedule: {{ .Values.rlTuner.schedule }})
   {{- end }}
   {{- if .Values.monitoring.enabled }}
   ✓ Monitoring: Enabled
   {{- end }}

3. Configuration:
   - Migration Threshold: {{ .Values.config.threshold }} gCO2eq/kWh
   - Regions: {{ join ", " .Values.config.regions }}
   - Region Type: {{ .Values.config.regionType }}

4. To check the status of Carbon-Kube components:
   kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

5. To view carbon intensity data:
   kubectl get configmap {{ .Values.configMap.name }} -n {{ .Release.Namespace }} -o yaml

6. To check scheduler logs:
   kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/component=scheduler

{{- if .Values.monitoring.grafana.enabled }}
7. To access Grafana dashboards:
   kubectl port-forward -n {{ .Release.Namespace }} svc/{{ .Release.Name }}-grafana 3000:80
   Then visit http://localhost:3000 (admin/admin)
{{- end }}

{{- if not .Values.secret.data.electricity-maps-api-key }}
⚠️  WARNING: Electricity Maps API key is not configured. Please update the secret:
   kubectl patch secret {{ .Values.secret.name }} -n {{ .Release.Namespace }} -p '{"data":{"electricity-maps-api-key":"<base64-encoded-key>"}}'
{{- end }}

For more information, visit: https://github.com/carbon-kube/carbon-kube