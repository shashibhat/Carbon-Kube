# Default values for carbon-kube
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []

# Image configuration
image:
  registry: docker.io
  repository: carbon-kube/carbon-kube
  tag: "v1.0.0"
  pullPolicy: IfNotPresent

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC configuration
rbac:
  create: true

# Scheduler plugin configuration
scheduler:
  enabled: true
  name: carbon-kube-scheduler
  replicas: 1
  image:
    repository: carbon-kube/scheduler
    tag: "v1.0.0"
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

# API Poller configuration
poller:
  enabled: true
  schedule: "*/5 * * * *"  # Every 5 minutes
  image:
    repository: carbon-kube/poller
    tag: "v1.0.0"
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 64Mi
  serviceAccount:
    create: true
    name: carbon-poller
    annotations: {}
  config:
    electricityMapsApiKey: ""
    noaaApiKey: ""
    awsRegion: ""
    cacheTimeout: 300  # 5 minutes
  nodeSelector: {}
  tolerations: []
  affinity: {}

# RL Tuner configuration
rlTuner:
  enabled: true
  schedule: "0 */6 * * *"  # Every 6 hours
  image:
    repository: carbon-kube/rl-tuner
    tag: "v1.0.0"
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 200m
      memory: 512Mi
  serviceAccount:
    create: true
    name: rl-tuner
    annotations: {}
  config:
    learningRate: 0.001
    batchSize: 64
    bufferSize: 10000
    trainingSteps: 1000
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Katalyst Integration configuration
katalyst:
  enabled: true
  
  # Carbon QoS Controller
  carbonQoSController:
    enabled: true
    image:
      repository: carbon-kube/carbon-qos-controller
      tag: "v1.0.0"
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi
    serviceAccount:
      create: true
      name: carbon-qos-controller
      annotations: {}
    config:
      reconcileInterval: 60  # seconds
      qosProfiles:
        greenGuaranteed:
          carbonThreshold: 100  # gCO2/kWh
          cpuGuarantee: 0.8
          memoryGuarantee: 0.8
          priority: "high"
        mixedBurstable:
          carbonThreshold: 200  # gCO2/kWh
          cpuGuarantee: 0.5
          memoryGuarantee: 0.6
          priority: "medium"
        dirtyBestEffort:
          carbonThreshold: 400  # gCO2/kWh
          cpuGuarantee: 0.2
          memoryGuarantee: 0.3
          priority: "low"
    nodeSelector: {}
    tolerations: []
    affinity: {}
  
  # Enhanced Scheduler Plugin
  enhancedScheduler:
    enabled: true
    image:
      repository: carbon-kube/enhanced-scheduler
      tag: "v1.0.0"
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 256Mi
    serviceAccount:
      create: true
      name: enhanced-scheduler
      annotations: {}
    config:
      schedulerName: "carbon-katalyst-scheduler"
      carbonWeight: 0.4
      qosWeight: 0.3
      topologyWeight: 0.2
      energyWeight: 0.1
      carbonThresholds:
        green: 100    # gCO2/kWh
        mixed: 200    # gCO2/kWh
        dirty: 400    # gCO2/kWh
      topologyAwareness:
        enabled: true
        numaAffinity: true
        gpuLocality: true
        networkTopology: true
      energyEfficiency:
        enabled: true
        pueThreshold: 2.0
        powerCapEnabled: true
    nodeSelector: {}
    tolerations: []
    affinity: {}
  
  # Katalyst RL Tuner (Enhanced)
  katalystRLTuner:
    enabled: true
    schedule: "0 */4 * * *"  # Every 4 hours
    image:
      repository: carbon-kube/katalyst-rl-tuner
      tag: "v1.0.0"
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 1Gi
    serviceAccount:
      create: true
      name: katalyst-rl-tuner
      annotations: {}
    config:
      environment:
        episodeLength: 288  # 24 hours in 5-min intervals
        maxZones: 10
        maxNodes: 10
      training:
        totalTimesteps: 100000
        learningRate: 0.0003
        batchSize: 256
        bufferSize: 100000
        learningStarts: 1000
      evaluation:
        evalFreq: 1000
        evalEpisodes: 10
      monitoring:
        prometheusGateway: "prometheus-pushgateway:9091"
        metricsInterval: 60
    nodeSelector: {}
    tolerations: []
    affinity: {}
  
  # Katalyst CRDs and RBAC
  crds:
    enabled: true
    # Custom Resource Definitions for Katalyst integration
    carbonQoSProfile:
      enabled: true
    carbonNodeTopology:
      enabled: true
    carbonOptimizationPolicy:
      enabled: true
  
  # Integration with existing Katalyst components
  integration:
    # Katalyst Core components
    katalystCore:
      enabled: true
      namespace: "katalyst-system"
    
    # QoS Manager integration
    qosManager:
      enabled: true
      carbonAware: true
      topologyAware: true
    
    # Resource Manager integration
    resourceManager:
      enabled: true
      carbonOptimized: true
      energyEfficient: true
    
    # Node Resource Manager integration
    nodeResourceManager:
      enabled: true
      carbonMetrics: true
      topologyMetrics: true

# Configuration
config:
  # Migration threshold (gCO2eq/kWh)
  threshold: 200.0
  # Regions to monitor
  regions:
    - us-west-2
    - us-east-1
    - eu-west-1
  # Region type (green/mixed/dirty)
  regionType: "mixed"
  # Metrics collection interval
  metricsInterval: 60  # seconds
  # Enable debug logging
  debug: false

# ConfigMap for carbon intensity data
configMap:
  create: true
  name: carbon-intensity-data
  data: {}

# Secret for API keys
secret:
  create: true
  name: carbon-kube-secrets
  data:
    electricity-maps-api-key: ""
    noaa-api-key: ""
    aws-access-key-id: ""
    aws-secret-access-key: ""

# Monitoring configuration
monitoring:
  enabled: true
  
  # Prometheus configuration
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: ""
      labels: {}
      interval: 30s
      scrapeTimeout: 10s
    rules:
      enabled: true
      namespace: ""
      labels: {}
  
  # Grafana configuration
  grafana:
    enabled: true
    dashboards:
      enabled: true
      namespace: ""
      labels: {}

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations: {}

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: carbon-kube.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 65534
  fsGroup: 65534

# Pod Security Context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65534
  fsGroup: 65534

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Node selector for all components
nodeSelector: {}

# Tolerations for all components
tolerations: []

# Affinity for all components
affinity: {}

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Additional environment variables
extraEnvVars: []

# Additional volumes
extraVolumes: []

# Additional volume mounts
extraVolumeMounts: []

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Lifecycle hooks
lifecycle: {}

# Liveness probe
livenessProbe:
  enabled: true
  httpGet:
    path: /healthz
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Readiness probe
readinessProbe:
  enabled: true
  httpGet:
    path: /readyz
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Startup probe
startupProbe:
  enabled: false
  httpGet:
    path: /healthz
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30