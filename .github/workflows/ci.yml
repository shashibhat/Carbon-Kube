name: Carbon-Kube CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Go tests and linting
  go-tests:
    name: Go Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        
    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m
      
    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: go
        name: go-coverage
        
    - name: Build binary
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/carbon-kube-plugin ./cmd/plugin
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: go-binaries
        path: bin/

  # Python tests and linting
  python-tests:
    name: Python Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock flake8 black isort mypy
        
    - name: Run black (code formatting)
      run: black --check --diff scripts/
      
    - name: Run isort (import sorting)
      run: isort --check-only --diff scripts/
      
    - name: Run flake8 (linting)
      run: flake8 scripts/ --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Run mypy (type checking)
      run: mypy scripts/ --ignore-missing-imports
      
    - name: Run pytest with coverage
      run: |
        pytest test/unit/test_poller.py -v --cov=scripts --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'
        
    - name: Upload Gosec scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'gosec-results.sarif'

  # Helm chart linting and testing
  helm-tests:
    name: Helm Chart Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Lint Helm charts
      run: |
        helm lint charts/carbon-kube/
        
    - name: Install chart-testing
      uses: helm/chart-testing-action@v2.4.0
      
    - name: Run chart tests
      run: |
        ct lint --config .github/ct.yaml
        
    - name: Create kind cluster
      uses: helm/kind-action@v1.8.0
      
    - name: Install and test charts
      run: |
        ct install --config .github/ct.yaml

  # CDK validation
  cdk-validation:
    name: CDK Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Set up Python for CDK
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install CDK dependencies
      run: |
        npm install -g aws-cdk
        pip install -r cdk/requirements.txt
        
    - name: CDK synth
      run: |
        cd cdk
        cdk synth --all
        
    - name: CDK diff (if applicable)
      run: |
        cd cdk
        cdk diff --all || true

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [go-tests, python-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: carbon-kube-test
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Load Docker images
      run: |
        # Build and load test images
        docker build -t carbon-kube-plugin:test -f Dockerfile.plugin .
        docker build -t carbon-kube-poller:test -f Dockerfile.poller .
        kind load docker-image carbon-kube-plugin:test --name carbon-kube-test
        kind load docker-image carbon-kube-poller:test --name carbon-kube-test
        
    - name: Install Carbon-Kube
      run: |
        helm install carbon-kube charts/carbon-kube/ \
          --set image.tag=test \
          --set poller.image.tag=test \
          --wait --timeout=300s
          
    - name: Run integration tests
      run: |
        python test/integration/test_e2e.py
        
    - name: Collect logs on failure
      if: failure()
      run: |
        kubectl logs -l app=carbon-kube --all-containers=true
        kubectl describe pods -l app=carbon-kube

  # Build and push container images
  build-images:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [go-tests, python-tests, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-plugin
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-poller
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push plugin image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.plugin
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-plugin:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push poller image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.poller
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-poller:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Release automation
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-images, helm-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "## Changes" > CHANGELOG_TEMP.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG_TEMP.md
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: CHANGELOG_TEMP.md
        draft: false
        prerelease: false

  # Deployment to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Deploy with CDK
      run: |
        cd cdk
        pip install -r requirements.txt
        cdk deploy CarbonKubeStack-staging --require-approval never
        
    - name: Run smoke tests
      run: |
        # Basic connectivity and health checks
        kubectl --context staging get pods -l app=carbon-kube
        kubectl --context staging logs -l app=carbon-kube --tail=50

  # Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [go-tests, python-tests, security-scan, helm-tests]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Carbon-Kube CI/CD pipeline completed successfully!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Carbon-Kube CI/CD pipeline failed. Please check the logs."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}